Start the CLI:
mysql-ctl cli; 


List available databases:
SHOW DATABASES;


Create a database:
CREATE DATABASE pets; 


Use specific database:
USE pets;


Drop a database:
DROP DATABASE pets;


Create table:
CREATE TABLE cats
  (
    name VARCHAR(100),
    age INT
  );


Drop table:
DROP TABLE cats;


Insert data:
INSERT INTO cats(name, age) VALUES ('Jetson', 7);


Show all data: 
SELECT * FROM cats;


Create table with constraints:
CREATE TABLE employees (
    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    middle_name VARCHAR(255) DEFAULT 'no middle name provided',
    age INT NOT NULL,
    current_status VARCHAR(255) NOT NULL DEFAULT 'employed'
);


Using SELECT:
SELECT age, breed, name, cat_id FROM cats; 


Using WHERE:
SELECT * FROM cats WHERE age=4; 


Using AS(aliases):
SELECT name AS 'cat name', breed AS 'kitty breed' FROM cats;


Update data:
UPDATE cats SET breed='Shorthair' WHERE breed='Tabby';


Delete data:
DELETE FROM cats WHERE name='Egg';


Using CONCAT:
SELECT CONCAT(author_fname, ' ', author_lname) AS 'full name' FROM books;


Using CONCAT with several aliases:
SELECT author_fname AS first, author_lname AS last, CONCAT(author_fname, ', ', author_lname) AS 'full_name' FROM books;


Using CONCAT_WS:
SELECT CONCAT_WS(' - ', title, author_fname, author_lname) FROM books;


Using SUBSTRING:
SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;


Combining CONCAT and SUBSTRING:
SELECT CONCAT(SUBSTRING(title, 1, 10), '...') AS 'short title' FROM books;


Using REPLACE:
SELECT REPLACE(title, 'e ', '3') FROM books;


Using REVERSE:
SELECT REVERSE(author_fname) FROM books;
 

Using CHAR_LENGTH:
SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;


Using UPPER and LOWER:
SELECT UPPER(title) FROM books;


Using DISTINCT:
SELECT DISTINCT author_fname, author_lname FROM books;


Using ORDER BY:
SELECT title, released_year, pages FROM books ORDER BY released_year;


USING ORDER BY with ASC or DESC and multiple queries:
SELECT author_fname, author_lname FROM books ORDER BY author_lname, 1 DESC;


Using LIMIT:
SELECT title, released_year FROM books ORDER BY released_year LIMIT 5;


Using LIKE:
SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%';
SELECT title, stock_quantity FROM books WHERE stock_quantity LIKE '____';


Using COUNT:
SELECT COUNT(*) FROM books;
SELECT COUNT(author_fname) FROM books;
SELECT COUNT(DISTINCT author_lname, author_fname) FROM books;


Using GROUP BY:
SELECT released_year, COUNT(*) FROM books GROUP BY released_year;
SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname;
SELECT CONCAT('In ', released_year, ' ', COUNT(*), ' book(s) released') AS year FROM books GROUP BY released_year;


Using MIN and MAX:
SELECT MIN(released_year) FROM books;
SELECT author_fname, author_lname, MIN(released_year) FROM books GROUP BY author_lname, author_fname;
SELECT CONCAT(author_fname, ' ', author_lname) AS author, MAX(pages) AS 'longest book' FROM books GROUP BY author_lname, author_fname;


Using subqueries:
SELECT title, pages FROM books 
WHERE pages = (SELECT Max(pages) FROM books); 


Using SUM:
SELECT SUM(released_year) FROM books;
SELECT author_fname, author_lname, SUM(pages) FROM books GROUP BY author_lname, author_fname;


Using AVG:
SELECT released_year, AVG(stock_quantity) FROM books GROUP BY released_year;
SELECT author_fname, author_lname, AVG(pages) FROM books GROUP BY author_lname, author_fname;


Using CURDATE(), CURTIME(), NOW():
INSERT INTO people (name, birthdate, birthtime, birthdt) VALUES ("Test", CURDATE(), CURTIME(), NOW());


Formatting dates:
SELECT name, birthdate, DAY(birthdate) FROM people;
SELECT name, birthtime, MINUTE(birthtime) FROM people;
SELECT DATE_FORMAT(birthdt, '%m/%d/%Y') FROM people;


Date arithmetic:
SELECT name, birthdate, DATEDIFF(NOW(), birthdate) FROM people;
SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;
SELECT birthdt, birthdt + INTERVAL 1 MONTH FROM people;
SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;


Using TIMESTAMPS:
CREATE TABLE comments (content VARCHAR(100), created_at TIMESTAMP DEFAULT NOW());
CREATE TABLE comments2 (content VARCHAR(100), changed_at TIMESTAMP DEFAULT NOW() ON UPDATE CURRENT_TIMESTAMP);


Using Not Equal:
SELECT title, author_lname FROM books WHERE author_lname != "Harris";


Using NOT LIKE:
SELECT title FROM books WHERE title NOT LIKE "%W%";


Using Greater Than, Less Than:
SELECT title, released_year FROM books WHERE released_year > 2000;
SELECT title, released_year FROM books WHERE released_year <= 2000;


Using Logical AND, Logical OR:
SELECT title, author_lname, released_year FROM books WHERE author_lname="Eggers" AND released_year > 2010;
SELECT title, author_lname, released_year FROM books WHERE author_lname="Eggers" OR released_year > 2010;
SELECT * FROM books WHERE author_lname="Eggers" AND released_year > 2010 AND title LIKE "%novel%";


Using BETWEEN and NOT BETWEEN:
SELECT title, released_year FROM books WHERE released_year BETWEEN 2004 AND 2015;
SELECT title, released_year FROM books WHERE released_year NOT BETWEEN 2004 AND 2015;


Using Cast:
SELECT CAST('2017-05-02' AS DATETIME);
SELECT name, birthdt FROM people WHERE birthdt BETWEEN CAST('1980-01-01' AS DATETIME) AND CAST('2000-01-01' AS DATETIME);


Using IN and NOT IN:
SELECT title, author_lname FROM books WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');
SELECT title, released_year FROM books WHERE released_year >= 2000 AND released_year NOT IN (2000,2002,2004,2006,2008,2010,2012,2014,2016);


Case Statements:
SELECT title, released_year,
       CASE 
         WHEN released_year >= 2000 THEN 'Modern Lit'
         ELSE '20th Century Lit'
       END AS GENRE
FROM books;
SELECT title, stock_quantity,
    CASE 
        WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
        WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
        ELSE '***'
    END AS STOCK
FROM books;


Using Foreign Keys:
CREATE TABLE customers(id INT AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(100), last_name VARCHAR(100), email VARCHAR(100));
CREATE TABLE orders(id INT AUTO_INCREMENT PRIMARY KEY, order_date DATE, amount DECIMAL(8,2), customer_id INT, FOREIGN KEY(customer_id) REFERENCES customers(id));


Using Inner Joins:
SELECT * FROM customers JOIN orders ON customers.id = orders.customer_id;
SELECT first_name, last_name, order_date, amount FROM customers JOIN orders ON customers.id = orders.customer_id;


Left and Right Joins:
SELECT * FROM customers LEFT JOIN orders ON customers.id = orders.customer_id;
SELECT first_name, last_name, IFNULL(SUM(amount), 0) AS total_spent FROM customers LEFT JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id ORDER BY total_spent;
SELECT IFNULL(first_name,'MISSING') AS first, IFNULL(last_name,'USER') AS LAST, order_date, amount, SUM(amount) FROM customers RIGHT JOIN orders ON customers.id = orders.customer_id GROUP BY first_name, last_name;


Working with On Delete Cascade:
CREATE TABLE orders(id INT AUTO_INCREMENT PRIMARY KEY, order_date DATE, amount DECIMAL(8,2), customer_id INT, FOREIGN KEY(customer_id) REFERENCES customers(id) ON DELETE CASCADE);